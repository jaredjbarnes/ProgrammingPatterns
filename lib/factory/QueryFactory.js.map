{"version":3,"sources":["../../src/factory/QueryFactory.js"],"names":["QueryFactory","CompositeNode","type","name","propertyNode","typeNode","ValueNode","nameNode","children","push","value","Array","isArray","Error"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;;;;;IAEqBA,Y;AACjB,4BAAc;AAAA;AAAG;;;;wCAEF;AACX,mBAAO,IAAIC,uBAAJ,CAAkB,KAAlB,CAAP;AACH;;;uCAEa;AACV,mBAAO,IAAIA,uBAAJ,CAAkB,IAAlB,CAAP;AACH;;;6CAEmB;AAChB,mBAAO,IAAIA,uBAAJ,CAAkB,UAAlB,CAAP;AACH;;;8CAEqB;AAClB,mBAAO,IAAIA,uBAAJ,CAAkB,WAAlB,CAAP;AACH;;;iDAEwB;AACrB,mBAAO,IAAIA,uBAAJ,CAAkB,cAAlB,CAAP;AACH;;;kDAEyB;AACtB,mBAAO,IAAIA,uBAAJ,CAAkB,eAAlB,CAAP;AACH;;;+CAEsB;AACnB,mBAAO,IAAIA,uBAAJ,CAAkB,YAAlB,CAAP;AACH;;;2DAEkC;AAC/B,mBAAO,IAAIA,uBAAJ,CAAkB,wBAAlB,CAAP;AACH;;;wDAE+B;AAC5B,mBAAO,IAAIA,uBAAJ,CAAkB,qBAAlB,CAAP;AACH;;;2CAEkBC,I,EAAMC,I,EAAM;AAC3B,gBAAMC,eAAe,IAAIH,uBAAJ,CAAkB,UAAlB,CAArB;;AAEA,gBAAMI,WAAW,IAAIC,mBAAJ,CAAc,MAAd,EAAsBJ,IAAtB,CAAjB;AACA,gBAAMK,WAAW,IAAID,mBAAJ,CAAc,cAAd,EAA8BH,IAA9B,CAAjB;;AAEAC,yBAAaI,QAAb,CAAsBC,IAAtB,CAA2BJ,QAA3B,EAAqCE,QAArC;;AAEA,mBAAOH,YAAP;AACH;;;wCAEeM,K,EAAO;;AAEnB,gBAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;;AAE3B,uBAAO,IAAIJ,mBAAJ,CAAc,QAAd,EAAwBI,KAAxB,CAAP;AAEH,aAJD,MAIO,IAAI,OAAOA,KAAP,KAAiB,SAArB,EAAgC;;AAEnC,uBAAO,IAAIJ,mBAAJ,CAAc,SAAd,EAAyBI,KAAzB,CAAP;AAEH,aAJM,MAIA,IAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;;AAElC,uBAAO,IAAIJ,mBAAJ,CAAc,QAAd,EAAwBI,KAAxB,CAAP;AAEH,aAJM,MAIA,IAAIC,MAAMC,OAAN,CAAcF,KAAd,CAAJ,EAA0B;;AAE7B,uBAAO,IAAIJ,mBAAJ,CAAc,OAAd,EAAuBI,KAAvB,CAAP;AAEH,aAJM,MAIA,IAAI,OAAOA,KAAP,KAAiB,QAAjB,IAA6BA,UAAU,IAA3C,EAAiD;;AAEpD,uBAAO,IAAIJ,mBAAJ,CAAc,QAAd,EAAwBI,KAAxB,CAAP;AAEH,aAJM,MAIA;;AAEH,sBAAM,IAAIG,KAAJ,CAAU,qBAAV,CAAN;AAEH;AAEJ;;;;;;kBA9EgBb,Y","file":"QueryFactory.js","sourcesContent":["import ValueNode from \"../composite/ValueNode\";\nimport CompositeNode from \"../composite/CompositeNode\";\n\nexport default class QueryFactory {\n    constructor() { }\n\n    createAndNode(){\n        return new CompositeNode(\"and\");\n    }\n\n    createOrNode(){\n        return new CompositeNode(\"or\");\n    }\n\n    createContainsNode(){\n        return new CompositeNode(\"contains\");\n    }\n\n    createIsEqualToNode() {\n        return new CompositeNode(\"isEqualTo\");\n    }\n\n    createIsNotEqualToNode() {\n        return new CompositeNode(\"isNotEqualTo\");\n    }\n\n    createIsGreaterThanNode() {\n        return new CompositeNode(\"isGreaterThan\");\n    }\n\n    createIsLessThanNode() {\n        return new CompositeNode(\"isLessThan\");\n    }\n\n    createIsGreaterThanOrEqualToNode() {\n        return new CompositeNode(\"isGreaterThanOrEqualTo\");\n    }\n\n    createIsLessThanOrEqualToNode() {\n        return new CompositeNode(\"isLessThanOrEqualTo\");\n    }\n\n    createPropertyNode(type, name) {\n        const propertyNode = new CompositeNode(\"property\");\n\n        const typeNode = new ValueNode(\"type\", type);\n        const nameNode = new ValueNode(\"propertyName\", name);\n\n        propertyNode.children.push(typeNode, nameNode);\n\n        return propertyNode;\n    }\n\n    createValueNode(value) {\n\n        if (typeof value === \"string\") {\n\n            return new ValueNode(\"string\", value);\n\n        } else if (typeof value === \"boolean\") {\n\n            return new ValueNode(\"boolean\", value);\n\n        } else if (typeof value === \"number\") {\n\n            return new ValueNode(\"number\", value);\n\n        } else if (Array.isArray(value)) {\n\n            return new ValueNode(\"array\", value);\n\n        } else if (typeof value === \"obejct\" && value !== null) {\n\n            return new ValueNode(\"object\", value);\n\n        } else {\n\n            throw new Error(\"Unknown value type.\");\n\n        }\n\n    }\n}"]}